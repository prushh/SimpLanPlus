
state = {dec, load, deleted, error}
off = num
type = [int, bool]
point = num

id -> (type, off, state, point)

/gamma |- Block : /gamma, res(type)
/gamma |- Declarations  : /gamma'
/gamma |- Statements  : /gamma', res(type)
/gamma |- exp : /gamma', res(type, point)


##############################################################################################################################################
##############################################################################################################################################


/gamma*[] |- Declarations : /gamma'	 	

/gamma* /gamma' |- Statements : /gamma'', res(type)		

foreach var in /gamma_1 (var <= delete)
-------------------------------------------------------------------------------------------------[Block]
		/gamma |- {Declarations; Statements;} : /gamma, res.type.


##############################################################################################################################################


id -> not_in(/gamma) 	/gamma' = /gamma [id -> (type, off, dec, type.point)]

off = -(count(var) in /gamma + 1)
------------------------------------------------------------------------------[DecVar]
		/gamma |- type id : /gamma'


##############################################################################################################################################


id -> not_in(/gamma) 	

/gamma |- exp : /gamma', res(type, point)	

(type.point != 0  &&  res.point != 0) || (type.point == 0  &&  res.point == 0)

type == res.type

/gamma'' = /gamma' [id -> (type, off, load, type.point)]

off = -(count(var) in /gamma' + 1)
------------------------------------------------------------------------------[DecVarAsg]
		/gamma |- type id = exp : /gamma''


##############################################################################################################################################


id -> not_in (top(/gamma))

/gamma*[id |-> ((T1 arg1, ... , Tn argn) |-> type ), arg1 -> T1, ... , argn -> Tn] |- block : /gamma, res(type)

/gamma' = /gamma [id |-> ((T1 arg1, ... , Tn argn) -> type)]

type == res.type
------------------------------------------------------------------------------[DecFun]
	/gamma |- type id (T1 arg1, ... , Tn argn) block : /gamma'


##############################################################################################################################################


/gamma |- lhs : /gamma', res_1(type, point)	/gamma |- exp : /gamma'', res_2(type,point)

(res_1.point != 0  &&  res_2.point != 0) || (res_1.point == 0  &&  res_2.point == 0)

res_1.type == res_2.type

/gamma''' = /gamma'' [lhs -> (/gamma.lhs.type, /gamma.lhs.off, /gamma.lhs.state |> load, /gamma.lhs.point)]
-----------------------------------------------------------------------------------------------------------------------[Asg]
		/gamma |- lhs = exp ; : /gamma''', void


##############################################################################################################################################


/gamma |- lhs : /gamma', res(type, point)	

res.point == 0

/gamma.lhs.point != 0

/gamma' = /gamma [lhs -> (/gamma.lhs.type, /gamma.lhs.off, /gamma.lhs.state |> delete, /gamma.lhs.point)]
--------------------------------------------------------------------------------------------------------------------------[Deletion]
				/gamma |- delete lhs ; : /gamma', void


##############################################################################################################################################


/gamma |- exp : /gamma', res(type, point)
--------------------------------------------------------------------------------------------------------------------------[Print]
				/gamma |- print exp ; : /gamma', void


##############################################################################################################################################


/gamma |- exp : /gamma', res(type, point)
--------------------------------------------------------------------------------------------------------------------------[ReturnExp]
				/gamma |- return exp ; : /gamma', res.type


##############################################################################################################################################



--------------------------------------------------------------------------------------------------------------------------[ReturnNoExp]
				/gamma |- return ; : /gamma', void


##############################################################################################################################################


/gamma |- exp : /gamma', res_1(type, point)

res_1.type == bool

res_1.point == 0

/gamma' |- Statements : /gamma'', res_2(type)
--------------------------------------------------------------------------------------------------------------------------[It]
				/gamma |- if (exp) Statements : /gamma'', res_2.type


##############################################################################################################################################


/gamma |- exp : /gamma', res_1(type, point)

res_1.type == bool

res_1.point == 0

/gamma' |- S1: /gamma'', res_2(type)

/gamma' |- S2: /gamma''', res_3(type)

res_2.type == res_3.type

--------------------------------------------------------------------------------------------------------------------------[Ite]
				/gamma |- if (exp) S1 else S2: /gamma'' |> /gamma''', res_2.type


##############################################################################################################################################


/gamma |- id : /gamma', res((T1, ... , Tn) -> type)

/gamma |- expi : /gamma_i, res_i(type, point)

((/gamma_i, res_i.type) == )

//TODO

--------------------------------------------------------------------------------------------------------------------------[Call]
				/gamma |- id(exp1, ..., expn) ; : 


##############################################################################################################################################


NUMBER in Dom(Integer)

--------------------------------------------------------------------------------------------------------------------------[ValExp]
				/gamma |- NUMBER: /gamma', int, 0


##############################################################################################################################################


BOOL in Dom(Boolean)

--------------------------------------------------------------------------------------------------------------------------[BoolExp]
				/gamma |- BOOL : /gamma', bool, 0


##############################################################################################################################################


/gamma |- left : /gamma', res1(type, point)

op in [*, /, +, -]

/gamma' |- right : /gamma'', res2(type, point)

res1.type == res2.type == int

res1.point == res2.point == 0

--------------------------------------------------------------------------------------------------------------------------[BinExp]
				/gamma |- left op right : /gamma'', int, 0


##############################################################################################################################################


/gamma |- left : /gamma', res1(type, point)

op in [<, <=, >, >=, ==, !=, &&, ||]

/gamma' |- right : /gamma'', res2(type, point)

res1.type == res2.type

res1.point == res2.point == 0

--------------------------------------------------------------------------------------------------------------------------[BinBoolExp]
				/gamma |- left op right : /gamma'', bool, 0


##############################################################################################################################################


/gamma |- exp : /gamma', res(type, point)

--------------------------------------------------------------------------------------------------------------------------[BaseExp]
				/gamma |- ( exp ) : /gamma', res.type, res.point


##############################################################################################################################################


/gamma |- exp : /gamma', res(type, point)

res.type == int

res.point == 0

--------------------------------------------------------------------------------------------------------------------------[NegExp]
				/gamma |- -exp : /gamma', int, 0


##############################################################################################################################################


/gamma |- exp : /gamma', res(type, point)

res.type == bool

res.point == 0

--------------------------------------------------------------------------------------------------------------------------[NotExp]
				/gamma |- !exp : /gamma', bool, 0


##############################################################################################################################################


id -> in(/gamma)

/gamma' = /gamma [id -> (/gamma.id.type, /gamma.id.off, /gamma.id.state |> load, /gamma.id.point)]

/gamma.id.point == 0

--------------------------------------------------------------------------------------------------------------------------[DerExp]
				/gamma |- id : /gamma', /gamma.id.type, 0


##############################################################################################################################################


id -> in(/gamma)

/gamma' = /gamma [id -> (/gamma.id.type, /gamma.id.off, /gamma.id.state |> load, /gamma.id.point)]

/gamma.id.point != 0

/gamma.id.point <= n

--------------------------------------------------------------------------------------------------------------------------[DerPointExp]
				/gamma |- id ^1..^n : /gamma', /gamma.id.type, n


##############################################################################################################################################


type == bool \/ int

/gamma.id.point == 0

--------------------------------------------------------------------------------------------------------------------------[NewExp]
				/gamma |- new type : /gamma, type, 0

##############################################################################################################################################


type in [bool, int]

/gamma.id.point != 0

--------------------------------------------------------------------------------------------------------------------------[NewPointExp]
				/gamma |- new ^1..^n type : /gamma, type, n


##############################################################################################################################################
##############################################################################################################################################


TODO:
 - Call
 - CallExp